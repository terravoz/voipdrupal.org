<?php

/**
 * Define some constants
 */
defined('SOUNDCLOUD_RENDERING_PENDING')
        or define('SOUNDCLOUD_RENDERING_PENDING', 1);
defined('SOUNDCLOUD_RENDERING_COMPLETE')
        or define('SOUNDCLOUD_RENDERING_COMPLETE', 10);
defined('SOUNDCLOUD_RENDERING_FAILED')
        or define('SOUNDCLOUD_RENDERING_FAILED', 20);

/**
 *Implementation of hook_menu()
 */
function soundcloud_upload_menu() {

  $items['admin/settings/soundcloud_tools/soundcloud_upload'] = array(
    'title' => 'Soundcloud Upload Settings',
    'description' => 'Soundcloud Upload Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('soundcloud_upload_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
    
  );

  return $items;
}

/**
 * Implementation of hook_cron().
 */
function soundcloud_upload_cron() {
  $res = db_query("SELECT * FROM {soundcloud_files} WHERE status = %d", SOUNDCLOUD_RENDERING_PENDING);
  while ($job = db_fetch_array($res)) {
    $track_id = soundcloud_upload_send_file($job['fid']);
    if ($track_id) {
      //Invoke hook_soundcloud_onupload()
      //module_invoke_all('soundcloud_onupload', $fname, $track_id);
    }
  }
}

/**
 * Configuration Form
 *
 * @return
 *   string of form content or error message
 */
function soundcloud_upload_admin_settings_form() {
  global $base_url;

  $form = array();
  
  $form['soundcloud_upload_on_cron'] = array(
    '#type' => 'radios',
    '#title' => t('Soundcloud Upload time'),
    '#default_value' => variable_get('soundcloud_upload_on_cron', 0),
    '#options' => array('Audio files should be uploaded to Soundcloud on Node Submit', 'Audio files should be uploaded to Soundcloud on cron'),
  );
  
  $form['soundcloud_upload_local'] = array(
    '#type' => 'radios',
    '#title' => t('Display options when audio is not uploaded to Soundcloud yet.'),
    '#options' => array('Display a text message explaining the file is not available at Soundcloud.', 'Serve local file if file is not available at Soundcloud?'),
    '#default_value' => variable_get('soundcloud_upload_local', 0),
  );
  
  return system_settings_form($form);
}

/**
 * Implementation of hook_nodeapi().
*/
function soundcloud_upload_nodeapi(&$node, $op, $teaser=NULL, $page=NULL) {
  switch ($op) {
    case 'insert':
    case 'update':
      //Get A List Of All CCK Fields
      foreach (content_fields(NULL, $node->type) as $field) {
        //Filter only allowed audio fields
        if (in_array($field['widget']['module'], soundcloud_api_allowed_fields()) && $field['type_name']==$node->type) {
          $fname=$field['field_name'];
          //Only convert if conversion is enabled for all fields or for this field.
          $field_settings=variable_get('soundcloud_upload_' . $fname, 0);
          if ($field_settings) {
            $value = $node->$fname;
            foreach ($value as $field_data) {
              //Check if field is empty
              if (empty($field_data['fid'])) {
                continue;
              }
              //Check if this file is already in uploaded
              $exist = db_result(db_query("SELECT fid FROM {soundcloud_files} WHERE fid=%d", $field_data['fid']));
              if ($exist) {
                continue;
              }
              #Else:
              if (!variable_get('soundcloud_upload_on_cron', 0)) {
                //Convert now
                $track_id = soundcloud_upload_send_file($field_data['fid']);
                if ($track_id) {
                  //Invoke hook_soundcloud_onupload()
                  module_invoke_all('soundcloud_onupload', $fname, $track_id);
                }
              }
              else {
                db_query("INSERT INTO {soundcloud_files} (fid, status) VALUES(%d, %d)", $field_data['fid'], SOUNDCLOUD_RENDERING_PENDING);
                drupal_set_message(t('Audio submission queued for uploading to Soundcloud.'));
              }
            }
          }
        }
      }   
    break;
  }
}

/**
 * Implementation of hook_field_formatter_info().
 */
function soundcloud_upload_field_formatter_info() {
  return array(
    'soundcloud' => array(
      'label' => t('Audio from Soundcloud'),
      'field types' => array('filefield'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'description' => t('Serves Audio from Soundcloud.'),
    ),
  );
}

/**
 * Implementation of hook_theme().
 */
function soundcloud_upload_theme() {
  $theme= array(
    'soundcloud_upload_formatter_soundcloud' => array(
      'arguments' => array('element' => NULL),
    ),
  );
  return $theme;    
}

/**
 * Implementation of hook_form_[form_id]_alter().
 * Add per field settings.
 */
function soundcloud_upload_form_content_field_edit_form_alter(&$form, &$form_state) {
    if (in_array($form['widget_module']['#value'], soundcloud_api_allowed_fields())) {
        $field_name = $form['field_name']['#value'];
        $form['soundcloud_upload'] = (is_array($form['soundcloud_upload']) ? $form['soundcloud_upload'] : array()) + array(
          '#type' => 'fieldset',
          '#title' => t('Soundcloud Upload Settings'),
          '#collapsible' => TRUE,
          '#collapsed' => FALSE
        );

        $form['soundcloud_upload']['autoupload'] = array(
          '#type' => 'checkbox',
          '#title' => t('Automatically upload content to Soundcloud.'),
          '#description' => 'Automatically upload content from this field to site Soundcloud account. 
                               Please make sure the '.l('Soundcloud settings','admin/settings/soundcloud_tools/soundcloud_api', array('attributes' => array('target' => '_blank'))).' are properly configured.', 
          '#default_value' => variable_get('soundcloud_upload_' . $field_name, 0),
        );
      
      $form['submit']['#weight']=10;
      $form['#submit'][]='soundcloud_upload_form_field_submit';
    }
}

/* Save per field settings */
function soundcloud_upload_form_field_submit(&$form, &$form_state) {
  $field_name = $form['field_name']['#value'];
  variable_set('soundcloud_upload_' . $field_name, $form_state['values']['autoupload']);
}

function theme_soundcloud_upload_formatter_soundcloud($element) {
  //Don't render player if there is no file.
  if (!$element['#item']['fid']) {
    return '';
  }
  
  $track_id = db_result(db_query("SELECT track_id FROM {soundcloud_files} WHERE fid=%d AND status=%d", $element['#item']['fid'], SOUNDCLOUD_RENDERING_COMPLETE));
  if ($track_id) {
    $output = theme('soundcloud_api_embeded_player', $track_id);
  }
  else {
    //File is not uploaded to Soundcloud
    $serve_local = variable_get('soundcloud_upload_local', 0);
    if ($serve_local) {
      $output = theme('audiofield_formatter_audiofield_embedded', $element);
    }
    else {
      $output = t("This track is not available on Soundcloud.");
    }
  }
  
  return $output;
}

function soundcloud_upload_send_file($fid) {
  $file = db_fetch_object(db_query("SELECT * FROM {files} WHERE fid=%d", $fid));
  $track = array(
    'track[title]' => $file->filename,
    'track[tags]' => t('Uploaded by Drupal Soundcloud Upload module'),
    'track[asset_data]' => '@'.realpath('./'.$file->filepath),
  );
    
  try {
    $soundcloud = soundcloud_api_get_object();
    $response = $soundcloud->post('tracks', $track);
    $response = json_decode($response);
    //Save track id to database
    if ($response->id) {
      $status = SOUNDCLOUD_RENDERING_COMPLETE;
    }
    else {
      $status = SOUNDCLOUD_RENDERING_FAILED;
    }
    drupal_set_message(t('Audio uploaded to Soundcloud.'));
    $track_id = $response->id;
  } 
  catch (Exception $e) {
    $track_id = 0;
    $status = SOUNDCLOUD_RENDERING_FAILED;
    watchdog('soundcloud_upload', "Error when saving file fid=$fid to Soundcloud. Error response returned: ". $e->getMessage());
    drupal_set_message(t('Audio couldn\'t be uploaded to Soundcloud. Please contact the site administrator.'), 'error');
  }
  
  db_query("INSERT INTO {soundcloud_files} (fid, track_id, status) VALUES(%d, %d, %d) ON DUPLICATE KEY UPDATE track_id=%d, status=%d", $fid, $track_id, $status, $track_id, $status);   
  return $track_id;
}

/**
 * Implementation of hook_file_delete().
 */
function soundcloud_upload_file_delete($file) {
   $track_id = db_result(db_query("SELECT track_id FROM {soundcloud_files} WHERE fid=%d AND status=%d", $file->fid, SOUNDCLOUD_RENDERING_COMPLETE));
 
   try {
    $soundcloud = soundcloud_api_get_object();
    $response = $soundcloud->delete('tracks/'.$track_id);
    $response = json_decode($response);
    watchdog('soundcloud_upload','File '.$file->fid.' deleted. Response from Soundcloud = '.print_r($response,true));
  } 
  catch (Exception $e) {
   watchdog('soundcloud_upload', "Error deleting file fid=$fid from Soundcloud. Error response returned: ". $e->getMessage());
  }
}