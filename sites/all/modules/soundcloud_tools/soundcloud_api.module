<?php
require_once(dirname(__FILE__) . "/Services/Soundcloud.php");

/**
 * Implementation of hook_menu().
 */
function soundcloud_api_menu() {
   
   $items['admin/settings/soundcloud_tools'] = array(
    'title' => 'SoundCloud Tools',
    'description' => 'SoundCloud Tools landing page',
    'page callback' => 'system_admin_menu_block_page',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'access arguments' => array('administer site configuration'),
   );
   
   $items['admin/settings/soundcloud_tools/soundcloud_api'] = array(
    'title' => 'SoundCloud API settings page',
    'description' => 'SoundCloud API settings page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('soundcloud_api_config'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
   );
 
   $items['soundcloud-callback.html'] = array(
    'title' => 'Soundcloud Callback',
    'page callback' => 'soundcloud_api_callback',
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/* Return array of supported CCK fields */
function soundcloud_api_allowed_fields() {
  $fields[]='filefield';
  $fields[]='audiofield';
  $fields[]='audiorecorderfield';
  $fields[]='phonerecorderfield';
  return $fields;
}

function soundcloud_api_config(&$form_state) {
  if (empty($form_state['storage']['step'])) {
    // we are coming in without a step, so default to step 1
    $form_state['storage']['step'] = 1;
  }
  
   switch ($form_state['storage']['step']) {
    case 1:
      $form['soundcloud_api_token'] = array(
        '#type' => 'fieldset',
        '#title' => t('SoundCloud application keys'),
        '#description' => t('Register your application at !soundcloud', array('!soundcloud' => l('http://soundcloud.com/you/apps',  'http://soundcloud.com/you/apps', array('target' => 'parent')))),
      );
     $form['soundcloud_api_token']['soundcloud_consumer_key'] = array(
       '#type' => 'textfield',
       '#title' => t('SoundCloud Client ID'),
       '#required' => TRUE,
       '#default_value' => variable_get('soundcloud_consumer_key', ''),
     );
     $form['soundcloud_api_token']['soundcloud_consumer_secret'] = array(
       '#type' => 'textfield',
       '#title' => t('Soundcloud Client Secret'),
       '#required' => TRUE,
       '#default_value' => variable_get('soundcloud_consumer_secret', ''),
     );
    break;
    case 2:
      $token = variable_get('soundcloud_oauth_token', '');
      if (!empty($token)) {
        $form['soundcloud_oauth_token'] = array(
          '#type' => 'textfield',
          '#title' => t('Soundcloud Oauth Token'),
          '#default_value' => variable_get('soundcloud_oauth_token', ''),
        );
      }
    break;
   }
  if ($form_state['storage']['step'] > 1) {
    $form['previous'] = array(
      '#type' => 'submit',
      '#value' => '<< Previous',
      '#submit' => array('soundcloud_api_settings_submit'),
    );
    
    $form['next'] = array(
      '#type' => 'submit',
      '#value' => t('Authorize'),
      '#attributes' => array(
        'onclick' => 'window.location="'.$authorizeUrl.'"'),
        '#submit' => array('soundcloud_api_settings_submit'),
    );
  }
  else {
    $form['next'] = array(
      '#type' => 'submit',
      '#value' => 'Next >>',
      '#submit' => array('soundcloud_api_settings_submit'),
    );
  }
 
  $form['#validate'] = array('soundcloud_api_validate');
  return $form;
}

function soundcloud_api_validate($form, &$form_state) {
if ($form_state['storage']['step'] == 1) {
  variable_set('soundcloud_consumer_key', $form_state['values']['soundcloud_consumer_key']);
  variable_set('soundcloud_consumer_secret', $form_state['values']['soundcloud_consumer_secret']);
}
}

function soundcloud_api_settings_submit($form, &$form_state) {
    if ($form_state['storage']['step'] > 1) {
      $callback_url = url('soundcloud-callback.html', array('absolute' => TRUE));
      $soundcloud = new Services_Soundcloud(variable_get('soundcloud_consumer_key', ''), variable_get('soundcloud_consumer_secret', ''), $callback_url);
      $authorizeUrl = $soundcloud->getAuthorizeUrl();
      drupal_goto($authorizeUrl);
    } 
    
    // check the button that was clicked and action the step chagne
    if ($form_state['clicked_button']['#id']=='edit-previous') {
      $form_state['storage']['step']--;
    } elseif ($form_state['clicked_button']['#id']=='edit-next') {
      $form_state['storage']['step']++;
    }  
    //tell Drupal we are redrawing the same form
    $form_state['rebuild'] = TRUE;
}

/**
 * Implementation of hook_theme().
 */
function soundcloud_api_theme() {
  $theme= array(
    'soundcloud_api_embeded_player' => array(
      'arguments' => array('track_id' => NULL, 'type' => NULL),
    ),
  );
  return $theme;    
}

function theme_soundcloud_api_embeded_player($track_id, $type='tracks') {
   if ($type == 'tracks') {
     $height = '81';
   }
   else {
     $height = '145';
   }
   return '<object height="'.$height.'" width="100%"> 
   <param name="movie" value="http://player.soundcloud.com/player.swf?url=http%3A%2F%2Fapi.soundcloud.com%2F'.$type.'%2F'.$track_id.'"></param> 
   <param name="allowscriptaccess" value="always"></param> 
   <embed allowscriptaccess="always" height="'.$height.'" 
   src="http://player.soundcloud.com/player.swf?url=http%3A%2F%2Fapi.soundcloud.com%2F'.$type.'%2F'.$track_id.'" type="application/x-shockwave-flash" width="100%">
   </embed> </object>';
}

function soundcloud_api_callback() {
  if(isset($_GET['code'])) {
    try {
      $callback_url = url('soundcloud-callback.html', array('absolute' => TRUE));
      $soundcloud = new Services_Soundcloud(variable_get('soundcloud_consumer_key', ''), variable_get('soundcloud_consumer_secret', ''), $callback_url);
      $accessToken = $soundcloud->accessToken($_GET['code']);
      variable_set('soundcloud_oauth_token', $accessToken['access_token']);
       watchdog('soundcloud_api', "Token saved ". $accessToken['access_token']);
      return t("Token succesfully saved.");  
    } 
    catch (Services_Soundcloud_Invalid_Http_Response_Code_Exception $e) {
      $vars = array();
      watchdog('soundcloud_api', "Error in soundcloud_api_callback() Soundcloud reported". $e->getMessage());
      return $e->getMessage();
    }
  }
  else {
    print '<html lang="en">
    <head><meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title>Connect with SoundCloud</title>
    </head>
    <body onload="window.opener.setTimeout(window.opener.SC.connectCallback, 1)">
    <body>
    <b style="width: 100%; text-align: center;">This popup should automatically close in a few seconds<b>
    </body>
    </html>';
    die();
  }
}

function soundcloud_api_get_object() {
  $callback_url = url('soundcloud-callback.html', array('absolute' => TRUE));
  $soundcloud = new Services_Soundcloud(variable_get('soundcloud_consumer_key', ''), variable_get('soundcloud_consumer_secret', ''), $callback_url);
  $token = variable_get('soundcloud_oauth_token', '');
  $soundcloud->setAccessToken($token);
  return $soundcloud;
}