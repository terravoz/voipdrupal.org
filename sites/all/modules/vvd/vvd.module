<?php


/**
 * Implementation of hook_menu().
 */
function vvd_menu() {
  //Temporarely remove export/load tabs and its features
  /*$items['node/%node/vvd_export'] = array(
      'access arguments' => array('export VVD nodes'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('vvd_export_gui', 1),
      'title' => 'VVD export',
      'weight' => 1,
      'type' => MENU_LOCAL_TASK,
  );
  $items['node/%node/vvd_load'] = array(
      'access arguments' => array('export VVD nodes'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('vvd_load_form', 1),
      'title' => 'VVD Load',
      'weight' => 2,
      'type' => MENU_LOCAL_TASK,
  );

  $items['node/vvd-import-preview/%'] = array(
    'title' => 'VVD import',
    'page callback' => 'vvd_import_preview_page',
    'page arguments' => array(2),
    'access arguments' => array('export VVD nodes'),
  );
  */
  $items['node/vvd/export/%'] = array(
    'title' => 'VVD import',
    'page callback' => 'vvd_export_get_file',
    'page arguments' => array(3),
    'access arguments' => array('export VVD nodes'),
  );
  
  $items['admin/content/vvd-import'] = array(
    'title' => 'VVD import',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vvd_import_form'),
    'access arguments' => array('export VVD nodes'),
    'description' => 'Import VVD workspace using <em>VVD export</em>.',
    'type' => MENU_LOCAL_TASK,
  );
  return $items;    
}

/**
 * Implementation of hook_perm().
 */
function vvd_perm() {
  return array('export VVD nodes');
}

/**
 * Implementation of hook_help().
 */
function vvd_help($path, $arg) {
  switch ($path) {
    case 'node/vvd-import-preview':
      return t('This clone will not be saved to the database until you submit.');
  }
}

/*CCK Functions*/
/**
 * Implementation of hook_field_info().
 */
function vvd_field_info() {
  return array(
    'vvd_workspace' => array(
      'label' => t('VVD Workspace'),
      'description' => t('Visual VoIP Drupal Workspace.'),
    ),
  );
}

/**
 * Implementation of hook_field_settings().
 */
function vvd_field_settings($op, $field) {
  switch ($op) {
    case 'database columns':
      $columns = array(
      'script_json' => array('type' => 'text', 'size' => 'big', 'not null' => FALSE),
      'script_code' => array('type' => 'text', 'size' => 'big', 'not null' => FALSE),
      );
    return $columns;
  }
}

/**
 * Implementation of hook_field().
 */
function vvd_field($op, &$node, $field, &$node_field, $teaser, $page) {
  switch ($op) {
   case 'validate': 
      foreach ($node_field as $delta => $item) {
        if ($item['script_code'] != '') {
           //Validate script name
           $script_code_array = explode('||**||',$item['script_code']);
           $script_names_array = unserialize(stripslashes($script_code_array[0]));
           $all_scripts = VoipScript::getScriptNames();
           if($node->nid) {
             //This is update, we need to see that script title is not changed
             $field_vvd_editor_script_code = db_fetch_array(db_query('SELECT field_vvd_editor_script_code FROM {content_type_vvd}  WHERE nid=%d', $node->nid));
             $old_script_code_array = explode('||**||', $field_vvd_editor_script_code);
             $old_script_names_array = unserialize(stripslashes($script_code_array[0]));
             
             $all_scripts = array_diff($all_scripts, $old_script_names_array);
           }
           
           foreach($script_names_array as $script_name) {
             if(empty($script_name)) {
               form_set_error($field['field_name'], t('Script name can not be empty.'));
             }
             else if(in_array($script_name, $all_scripts)) {
               form_set_error($field['field_name'], t('Script name %script_name already exists.', array('%script_name' => $script_name)));
             }
           }
           
           //Make sure script name is not repeated within workspace
           foreach(array_count_values($script_names_array) as $script_name => $repeated) {
             if($repeated>1) {
               form_set_error($field['field_name'], t('Script name %script_name already exists.', array('%script_name' => $script_name)));
             }
           }
           
           //Verify that PHP code doesn't contain any malicious code
           $script_codes = unserialize($script_code_array[1]);
           $allowed_functions = array('array_filter');
           foreach($script_codes as $i => $script) {
             $errors = voipscript_eval_validate($script, $allowed_functions);
             if ($errors) {
               $illegal_calls = implode(", ", $errors);
               form_set_error($field['field_name'], t("You don't have permission to use following PHP function: ") . $illegal_calls);
             }
           }
        }
      }	
    break;
  }
}


/**
 * Implementation of hook_content_is_empty().
 */
function vvd_content_is_empty($item, $field) {
  if (empty($item['script_code'])) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implementation of hook_theme().
 */
function vvd_theme() {
  return array(
    'vvd_widget' => array(
      'arguments' => array('element' => NULL),
    ),
    'vvd_formatter_default' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}

/**
 * Implementation of hook_field_formatter_info().
 */
function vvd_field_formatter_info() {
  return array(
    'default' => array(
      'label' => t('Visual VoIP Drupal Workspace'),
      'field types' => array('vvd_workspace'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
  );
}

/**
 * Implementation of hook_field_formatter().
 *
 * Prepare an individual item for viewing in a browser.
 *
 * @param $field
 *   The field the action is being performed on.
 * @param $item
 *   An array, keyed by column, of the data stored for this item in this field.
 * @param $formatter
 *   The name of the formatter being used to display the field.
 * @param $node
 *   The node object, for context. Will be NULL in some cases.
 *   Warning: when displaying field retrieved by Views, $node will not
 *   be a "full-fledged" node object, but an object containg the data returned
 *   by the Views query (at least nid, vid, changed)
 * @return
 *   An HTML string containing the formatted item.
 *
 * In a multiple-value field scenario, this function will be called once per
 * value currently stored in the field. This function is also used as the handler
 * for viewing a field in a views.module tabular listing.
 *
 * It is important that this function at the minimum perform security
 * transformations such as running check_plain() or check_markup().
 */
 /*
function vvd_field_formatter($field, $item, $formatter, $node) {
  if (!isset($item['script_json'])) {
    return '';
  }
 //TODO:
  return $text;
}*/

/**
 * FAPI theme for an individual text elements.
 *
 * The textfield or textarea is already rendered by the
 * textfield or textarea themes and the html output
 * lives in $element['#children']. Override this theme to
 * make custom changes to the output.
 *
 * $element['#field_name'] contains the field name
 * $element['#delta]  is the position of this element in the group
 */
function theme_vvd_widget($element) {
  drupal_add_css(drupal_get_path('module', 'vvd') .'/css/tab.css');
  drupal_add_css(drupal_get_path('module', 'vvd') .'/css/tabbar.css');
  drupal_add_css(drupal_get_path('module', 'vvd') .'/css/scriptblocks.css');
  drupal_add_js(drupal_get_path('module', 'vvd') .'/js/sb-compiled.js');
  drupal_add_js(drupal_get_path('module', 'vvd') .'/src/ScriptBlocksJSON.js');
  drupal_add_js(drupal_get_path('module', 'vvd') .'/js/interface.js');

  // Add voices to Javascript settings
  $voices = Voipvoice::getVoices();
  $js_voices = array_keys($voices);
  drupal_add_js(array('vvd_voices' =>  $js_voices), 'setting');
  
  drupal_add_js(drupal_get_path('module', 'vvd') .'/js/vvd.js');
  $output = '<div class="description">Type here the name of the workspace that is going to store your new scripts.</div>
  <div id="sbWorkspace-wrapper"><div id="sbWorkspace"></div>
  <div id="sbWorkspace-resize"><img src="'.base_path().drupal_get_path('module', 'vvd') .'/css/angle-nxs.gif" alt="slider" /></div>
  </div>';
  $output .=theme($element['script_json']['#type'], $element['script_json']);
  $output .=theme($element['script_code']['#type'], $element['script_code']);
  //$output .='<div onclick="vvd_json();">test json</div>';
  return $output;
}

/**
 * Theme function for 'default' field formatter.
 */
function theme_vvd_formatter_default($element) {
  $script_code_array = explode('||**||', $element['#item']['script_code']);
  
  //$script_names = unserialize(urldecode(stripslashes($script_code_array[0])));
  //$script_codes = unserialize(urldecode(stripslashes($script_code_array[1])));
  $script_names = unserialize(stripslashes($script_code_array[0]));
  $script_codes = unserialize($script_code_array[1]);
  
  //var_dump(unserialize($script_code_array[1]));
  if(is_array($script_codes)) {
  foreach($script_codes as $i => $script) {
    $output .= "<b>Script ".$script_names[$i].": </b><br/>";
    $output .= $script;
    $output .= "<br/><br/>";
  }
  }
  
 return $output;
}


/**
 * Implementation of hook_widget_info().
 * Define Visual VoIP Drupal Workspace widgets.
**/
function vvd_widget_info() {
  return array(
    'vvd_widget' => array(
      'label' => t('Visual VoIP Drupal Workspace'),
      'field types' => array('vvd_workspace'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
  );
}

/**
 * Implementation of hook_widget().
 */
function vvd_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $element = array(
    '#type' => $field['widget']['type'],
    '#default_value' => isset($items[$delta]) ? $items[$delta] : '',
    '#title' => $field['widget']['label'],
    '#weight' => $field['widget']['weight'],
    '#description' => $field['widget']['description'],
    '#required' => $field['required'],
    '#field' => $field,
  );
  return $element;
}


/**
 * Implementation of FAPI hook_elements().
 *
 * Any FAPI callbacks needed for individual widgets can be declared here,
 * and the element will be passed to those callbacks for processing.
 *
 * Drupal will automatically theme the element using a theme with
 * the same name as the hook_elements key.
 *
 * Autocomplete_path is not used by text_widget but other widgets can use it
 * (see nodereference and userreference).
 */
 function vvd_elements() {
  return array(
     'vvd_widget' => array(
      '#input' => TRUE,
      '#process' => array('vvd_widget_process'),
     ),
  );
}
/**
 * Process an individual element.
 *
 * Build the form element. When creating a form using FAPI #process,
 * note that $element['#value'] is already set.
 *
 * The $fields array is in $form['#field_info'][$element['#field_name']].
 */
function vvd_widget_process($element, $edit, $form_state, $form) {
  $field = $form['#field_info'][$element['#field_name']];
  $delta = $element['#delta'];
  $field_key=$element['#columns'][0];
  $element[$field_key] = array(
    '#type' => 'hidden',
    '#default_value' => isset($element['#value'][$field_key]) ? $element['#value'][$field_key] : NULL,
    '#size' => !empty($field['widget']['size']) ? $field['widget']['size'] : 9,   
    '#description' => $element['#description'],
    '#required' => $element['#required'],
    '#attributes' => array('class' => 'vvd-field-json'),
  );
  
  $field_key=$element['#columns'][1];
  $element[$field_key] = array(
    '#type' => 'hidden',
    '#default_value' => isset($element['#value'][$field_key]) ? $element['#value'][$field_key] : NULL,
    '#size' => !empty($field['widget']['size']) ? $field['widget']['size'] : 9,   
    '#description' => $element['#description'],
    '#required' => $element['#required'],
    '#attributes' => array('class' => 'vvd-field-script'),
  );

  return $element;
}

/**
 * Implementation of hook_form_[form_id]_alter().
 * Add json callback to node save button.
 */
function vvd_form_vvd_node_form_alter(&$form, &$form_state) {  
  $form['buttons']['submit']['#attributes'] = array('onclick' => 'vvd_json();');
}

/**
 * Implementation of hook_voipscript_get_script_names()
 */
function vvd_voipscript_get_script_names() {
  $script_names = array();
  $result = db_query('SELECT vvd.field_vvd_editor_script_code FROM {node} n, {content_type_vvd} vvd WHERE n.nid=vvd.nid AND n.status = 1');
  while ($vvd_node = db_fetch_object($result)) {
    $script_code_array = explode('||**||', $vvd_node->field_vvd_editor_script_code);
    $script_names_array = unserialize(stripslashes($script_code_array[0]));
    if(is_array($script_names_array)) {
      $script_names = array_merge($script_names_array, $script_names);
    }
  }
  return $script_names;
}

/**
 * Implementation of hook_voipscript_load_script()
 */
function vvd_voipscript_load_script($script_name, $options=NULL) {
  $script = NULL;

  //Each vvd field can have multiple scripts, therefore we can't directly query for name, but at least we limit to matches:
  $result = db_query('SELECT vvd.field_vvd_editor_script_code FROM {node} n, {content_type_vvd} vvd WHERE n.nid=vvd.nid AND n.status = 1 
  AND vvd.field_vvd_editor_script_code LIKE "%%s%"', $script_name);
  
  while ($vvd_node = db_fetch_object($result)) {
    $script_code_array = explode('||**||', $vvd_node->field_vvd_editor_script_code);
    $script_names_array = unserialize(stripslashes($script_code_array[0]));
    $script_codes = unserialize($script_code_array[1]);
    $key = array_search($script_name, (array)$script_names_array);
    if ($key !== FALSE) {
      $script = new VoipScript($script_name);
      $script_code =  $script_codes[$key];
      ob_start();
      if (eval("$script_code") === FALSE) {
        ob_end_clean();
        $script = NULL;
        watchdog('vvd', 'PHP syntax error in script: @script', array('@script' => $script_code), WATCHDOG_ERROR);
        return;
      }
     ob_end_clean();
    }
  }
  return $script;
}
/*
function vvd_export_gui($form_state, $node) {
  $form = array();
  if ($node->type != 'vvd') {
    //If not vvd node.
    $form['export'] = array(
      '#type' => 'markup',
      '#value' => t('VVD Export is available only for VVD content type.'),
    );
  }
  else {
    $export = array(
      'title' => $node->title,
      'json' => $node->field_vvd_editor[0]['script_json'],
      'code' => $node->field_vvd_editor[0]['script_code'],
    );
    $form['export'] = array(
      '#type' => 'textarea',
      '#title' => t('VVD export code'),
      '#default_value' => var_export($export, TRUE),
      '#rows' => 30,
      '#description' => t('Copy this code and then on the site you want to import to, go to the <em>Node export: import</em> link under <em>Create content</em>, and paste it in there.'),
      '#attributes' => array(
        'wrap' => 'off',
      ),
  );
  }
  
  return $form;
}
*/
/**
 * Import Form
 *//*
function vvd_load_form($form_state, $node) {

  $form = array();
  
  $form['#prefix'] = "<p>";
  $form['#prefix'] .= t('You may load VVD node by pasting the code exported from VVD export tab.') ." ";
  $form['#prefix'] .= "</p>";


  $form['paste'] = array(
    '#type' => 'fieldset',
    '#title' => t('Paste code'),
    '#collapsible' => TRUE,
  );
  $form['paste']['code'] = array(
    '#type' => 'textarea',
    '#default_value' => '',
    '#required' => TRUE,
    '#rows' => 30,
    '#description' => t('Cut and paste the code of an exported VVD node here.'),
    '#attributes' => array(
        'wrap' => 'off',
     ),
  );
  $form['#redirect'] = FALSE;
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Load'),
    '#suffix' => l(t('Reset the form'), $_GET['q']),
  );
  $form['#method'] = 'post';
  $form['#action'] = url('node/vvd-import-preview/'.$node->nid);
  return $form;
}
*/

/**
 *  Clones a node - prepopulate a node editing form
 *//*
function vvd_import_preview_page($nid) {
    global $user;
      // Convert the import formatted text back into a $import array.
      // Return if errors generated or not an array.
      // Use '@' to suppress errors about undefined constants in the macro.
      @eval('$import = ' . $_POST['code'].';');
      $node = node_load($nid);
      $node->field_vvd_editor[0]['script_json'] = $import['json'];
      $node->field_vvd_editor[0]['script_code'] = $import['code'];
      drupal_set_title(check_plain($node->title));

      module_load_include('inc', 'node', 'node.pages');
      return drupal_get_form($node->type .'_node_form', $node);
}
*/
/**
 * Generate text file.
 *
 * @param $nid
 *   A node id.
 * @param $code_string
 *   The text output.
 * @param $format
 *   The format used.
 */
function vvd_export_get_file($nid) {
  $node = node_load($nid);
  $export = array(
    'title' => $node->title,
    'json' => $node->field_vvd_editor[0]['script_json'],
    'code' => $node->field_vvd_editor[0]['script_code'],
  );
  header('Content-type: text/plain');
  header('Content-Disposition: attachment; filename="'. $node->title .'.vvd"');
  print(serialize($export));
  //print(var_export($export, TRUE));
  // Clean exit.
  module_invoke_all('exit');
  exit;
}

function vvd_import_form() {
$form['import'] = array(
    '#type' => 'file',
    '#title' => t('Upload VVD Workspace'),
    '#size' => 40,
    '#description' => t('Allowed extensions: vvd'),
  );
  
  $form['submit'] = array(
    '#type' => 'submit', 
    '#value' => t('Import'),
  );
  $form['#attributes'] = array('enctype' => "multipart/form-data"); 
  return $form;
}

function vvd_import_form_validate($form, &$form_state) {
  if (!$_FILES['files']['tmp_name']['import']) {
    form_set_error('import', t('Please upload a file.'));
    return;
  }
  else {
    $regex = '/\.(' . preg_replace('/ +/', '|', preg_quote('vvd')) . ')$/i';
    if (!preg_match($regex, $_FILES['files']['name']['import'])) {
     form_set_error('import', t('Only files with the following extensions are allowed: vvd.'));
    }
  }
}
function vvd_import_form_submit($form, &$form_state) {
  global $user;

  $code_string = file_get_contents($_FILES['files']['tmp_name']['import']);
  $import = unserialize($code_string);
  
  if (!$import || !is_array($import)) {
    form_set_error('import', t('Please upload a valid VVD export file.'));
    return;
  }
  
  $node->type = 'vvd';
  $node->status = 1;
  $node->uid = $user->uid;
  $node->title = $import['title'];
  $node->field_vvd_editor[0]['script_json'] = $import['json'];
  $node->field_vvd_editor[0]['script_code'] = $import['code'];
  node_validate($node);
  $errors = form_get_errors();
  if (!$errors) {
    //If no validation errors then save
    node_save($node);
    if($node->nid) {
      drupal_set_message(t('Workspace imported successfully'));
      drupal_goto('admin/content/vvd');
    }
    else {
      drupal_set_message(t('Workspace is not imported. Plese try again.'), 'error');
    }
  }
}