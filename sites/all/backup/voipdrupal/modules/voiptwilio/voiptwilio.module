<?php
// $Id$

/**
 * @file
 * Adds support for sending and receiving VoIP requests to and from Twilio.
 */

//-----------------------------------------------------------------------------
// Include files
//-----------------------------------------------------------------------------
foreach (array('voiptwilio.inc', 'voiptwilioserver.inc') as $file) {
  require_once(dirname(__FILE__) . DIRECTORY_SEPARATOR . 'includes' . DIRECTORY_SEPARATOR . $file);
}


//-----------------------------------------------------------------------------
// Public functions
//-----------------------------------------------------------------------------

/**
 * Implementation of hook_voip_serverinfo().
 */
function voiptwilio_voipserver_info() {
  $server = new VoipTwilioServer();
  return $server;
}

function voiptwilio_admin_form($configuration) {
  $form['voiptwilio_account_sid'] = array(
    '#type' => 'textfield',
    '#title' => t('Twilio Account SID'),
    '#description' => t("The account SID provided in your Twilio account dashboard."),
    '#default_value' => ($configuration['voiptwilio_account_sid']?$configuration['voiptwilio_account_sid']:''),
  );

  $form['voiptwilio_auth_token'] = array(
    '#type' => 'textfield',
    '#title' => t('Twilio Auth Token'),
    '#description' => t("The authorization token provided in your Twilio account dashboard."),
    '#default_value' => ($configuration['voiptwilio_auth_token']?$configuration['voiptwilio_auth_token']:''),
  );

  $form['voiptwilio_voice_id'] = array(
    '#type' => 'select',
    '#title' => t('Default voice'),
    '#description' => t('Voice to be used in automatic text-to-speech generation.'),
    '#options' => VoipTwilioServer::getVoicesList(),
    '#default_value' => $configuration['voiptwilio_voice_id']?$configuration['voiptwilio_voice_id']:'en_man',
  );


  return $form;
}

/**
 * Validates the submission of the configuration form.
 */
function voiptwilio_admin_form_validate($form, &$form_state) {

  // Send a test request to validate the configuration of the Twilio server
  $values = $form_state['values'];
  $result = VoipTwilioServer::ping($values);

  if(voip_error()){
    form_set_error('', t('A Twilio-related error occurred: @error', array('@error' => voip_error_message())));
  }
}

/*
 * Implementation of hook_menu()
 */
function voiptwilio_menu() {
  $items = array();

  $items['voip/twilio/callhandler'] = array(
    'title' => 'VoIP Twilio call handler',
    'description' => 'Handles incoming calls from Twilio.',
      // Note: Since both incoming calls and Twilio responses are received
      // via the same callhandler menu, the specific call permissions are to 
      // be checked inside the call handler function itself.
    'access callback' => TRUE, 
    'page callback' => '_voiptwilio_call_handler',
    'type' => MENU_CALLBACK,
  );

  return $items;
}


