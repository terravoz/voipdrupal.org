<?php

// $Id$

/**
 * @file
 * Implementation of core functionality associated with voip calls
 */

foreach (array('voipscript.inc', 'voipcall.inc') as $file) {
  require_once(dirname(__FILE__) . DIRECTORY_SEPARATOR . $file);
}


/**
 * Public functions
 */

/**
 * Implementation of hook_menu()
 */
function voipcall_menu() {
  $items = array();

  $items['admin/voip/call/settings'] = array(
    'title' => 'Default call configuration',
    'description' => 'Defines default parameters used in VoIP Drupal calls.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('voipcall_admin_form', NULL),
    'access arguments' => array('administer voipcall setup'),
  );
  
  $items['admin/voip/call/log'] = array(
    'title' => 'VoIP Call Log',
    'description' => 'Lists all VoIP Drupal calls.',
    'page callback' => 'voipcall_call_log',
    'access arguments' => array('administer voipcall setup'),
  );

  $items['voipcall/%'] = array(
    'title callback' => 'voipcall_call_page_title',
    'title arguments' => array(1),
    'description' => 'Lists individual VoIP Drupal calls.',
    'page callback' => 'voipcall_call_page',
    'page arguments' => array(1),
    'access arguments' => array('administer voipcall setup'),
  );
  
   $items['voip/sound/beep'] = array(
    'title' => 'Beep sound',
    'description' => 'Plays beep sound',
    'page callback' => 'voipcall_play_beep',
    'access callback' => TRUE, 
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_perm()
 */
function voipcall_perm() {
 return array('administer voipcall setup');
}

/**
 * Form implementation
 */
function voipcall_admin_form() {
  $form['voipcall_cid_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Caller id name'),
    '#description' => t("Caller id name to be used in VoIP Drupal calls. Note that, in the U.S., this value is ignored and replaced by the caller name stored in the telecommunications service's database"),
    '#size' => 40,
    '#maxlength' => 255,
    '#default_value' => variable_get('voipcall_cid_name',''),
  );

  $form['voipcall_cid_number'] = array(
    '#type' => 'textfield',
    '#title' => t('Caller id number'),
    '#description' => t('Caller id number to be used in VoIP Drupal calls.'),
    '#size' => 40,
    '#maxlength' => 255,
    '#default_value' => variable_get('voipcall_cid_number',''),
    '#required' => TRUE,
  );

  $form['voipcall_inbound_call_script_name'] = array(
    '#type' => 'select',
    '#title' => t('Inbound call script name'),
    '#description' => t('Name of the dialplan script to be used whenever the system receives a phone call.'),
    '#options' => VoipScript::getScriptNames(),
    '#default_value' => variable_get('voipcall_inbound_call_script_name', 'voipcall_default_inbound_call_script'),
  );

  $form['voipcall_outbound_call_script_name'] = array(
    '#type' => 'select',
    '#title' => t('Outbound call script name'),
    '#description' => t('Name of the default dialplan script to be used in calls made by the system.'),
    '#options' => VoipScript::getScriptNames(),
    '#default_value' => variable_get('voipcall_outbound_call_script_name', 'voipcall_default_outbound_call_script'),
  );

/** TODO: Commented out until SMS is better integrated into VoIP Drupal
  $form['voipcall_inbound_text_script_name'] = array(
    '#type' => 'select',
    '#title' => t('Inbound text script name'),
    '#description' => t('Name of the dialplan script to be used whenever the system receives a text message.'),
    '#options' => VoipScript::getScriptNames(),
    '#default_value' => variable_get('voipcall_inbound_text_script_name', 'voipcall_default_inbound_text_script'),
  );
****/

  $form['submit'] = array(
    '#type' => 'submit', 
    '#value' => t('Save'),
  );

  return $form;
}


/**
 * Validates the submission of the configuration form.
 */
function voipcall_admin_form_validate($form, &$form_state) {
  $values = $form_state['values'];
// TODO: provide feedback directly on the affected fields...
  $script_name = $values['voipcall_inbound_call_script_name'];
  $script = VoipScript::loadScript($script_name);
  if(!$script){
    form_set_error('', t('Invalid inbound call script name: @script_name.', array('@script_name' => $script_name)));
  }
  $script_name = $values['voipcall_outbound_call_script_name'];
  $script = VoipScript::loadScript($script_name);
  if(!$script){
    form_set_error('', t('Invalid outbound call script name: @script_name.', array('@script_name' => $script_name)));
  }

/** TODO: Awaiting SMS integration
  $script_name = $values['voipcall_inbound_text_script_name'];
  $script = VoipScript::loadScript($script_name);
  if(!$script){
    form_set_error('', t('Invalid inbound text script name: @script_name.', array('@script_name' => $script_name)));
  }
*******************/

}


function voipcall_admin_form_submit($form, &$form_state) {
  
  // Remove unecessary values
  unset($form_state['values']['op'], $form_state['values']['submit'], $form_state['values']['form_token'], $form_state['values']['form_id']);

  // store values
  variable_set('voipcall_cid_name', $form_state['values']['voipcall_cid_name']);
  variable_set('voipcall_cid_number', $form_state['values']['voipcall_cid_number']);
  variable_set('voipcall_inbound_call_script_name', $form_state['values']['voipcall_inbound_call_script_name']);
  variable_set('voipcall_outbound_call_script_name', $form_state['values']['voipcall_outbound_call_script_name']);

/** TODO: Awaiting SMS integration
  variable_set('voipcall_inbound_text_script_name', $form_state['values']['voipcall_inbound_text_script_name']);
******************/

  drupal_set_message(t('The default call settings have been saved.'));

  $form_state['redirect'] = 'admin/voip';
}


/*
 * Script-related functions
 */

/**
 * Return the name of the default script to be used with new incoming calls
 */
function voipcall_get_default_inbound_call_script_name() {
  $script_name = variable_get('voipcall_inbound_call_script_name', 'voipcall_default_inbound_call_script');
  return $script_name;
}

/**
 * Return the name of the default script to be used with new outgoing calls
 */
function voipcall_get_default_outbound_call_script_name() {
  $script_name = variable_get('voipcall_outbound_call_script_name', 'voipcall_default_outbound_call_script');
  return $script_name;
}

/**
 * Return the name of the default script to be used with incoming text messages
 */
/** TODO: Awaiting SMS integration
function voipcall_get_default_inbound_text_script_name() {
  $script_name = variable_get('voipcall_inbound_text_script_name', 'voipcall_default_inbound_text_script');
  return $script_name;
}
**************************/

/**
 * Implementation of hook_voipscript_get_script_names()
 */
function voipcall_voipscript_get_script_names() {
  $script_names[] = 'voipcall_default_inbound_call_script';
  $script_names[] = 'voipcall_default_outbound_call_script';

/** TODO: Awaiting SMS integration
  $script_names[] = 'voipcall_default_inbound_text_script';
**************************/

  return $script_names;
}


/**
 * Implementation of hook_voipscript_load_script()
 */
function voipcall_voipscript_load_script($script_name, $options=NULL) {
  $script = NULL;
  switch($script_name) {
    default:
      break;
    case 'voipcall_default_inbound_call_script':
      $script = new VoipScript('voipcall_default_inbound_call_script');
      $script->addSay(t("Welcome to the VoIP Drupal platform!"));
      $script->addSay(t("Bye bye."));
      $script->addHangup();
      break;
    case 'voipcall_default_outbound_call_script':
      $script = new VoipScript('voipcall_default_outbound_call_script');
      $script->addSay(t("This is a call from the VoIP Drupal platform!"));
      $script->addSay(t("Bye bye."));
      $script->addHangup();
      break;
/** TODO: Awaiting SMS integration
    case 'voipcall_default_inbound_text_script':
      $script = new VoipScript('voipcall_default_inbound_text_script');
      $script->addSendText(t("This is a TEXT response from the VoIP Drupal platform!"));
      $script->addHangup();
      break; 
**************************/
    case 'voipscript_run_ivr_menu':
      $script = voipscript_get_run_ivr_menu_script($options);
      break;
  }
  return $script;
}

/**
 * Implementation of hook_theme().
 */
function voipcall_theme() {
  return array(
    'voipcall_play_beep' => array(
      'arguments' => array(),
    ),
  );
}

function voipcall_play_beep(){
   print theme('voipcall_play_beep');
}

function theme_voipcall_play_beep(){
   $filename = drupal_get_path('module', 'voipcall').'/sound/beep.mp3';
   header('Content-Type: audio/mpeg');
   return readfile($filename);
}

function voipcall_call_log() {
  $headers = array(
  array('data' => t('cid'), 'field' => 'cid', 'sort' => 'asc'),
  array('data' => t('start'), 'field' => 'start_time', 'sort' => 'asc'),
  array('data' => t('user'), 'field' => 'uid', 'sort' => 'asc'),
  array('data' => t('caller name'), 'field' => 'caller_name', 'sort' => 'asc'),
  array('data' => t('caller number'), 'field' => 'caller_name', 'sort' => 'asc'),
  array('data' => t('dest name'), 'field' => 'dest_name', 'sort' => 'asc'),
  array('data' => t('dest number'), 'field' => 'dest_number', 'sort' => 'asc'),
  array('data' => t('other'), 'field' => 'other'),
  '');
  $sql = "SELECT cid, start_time, uid, caller_name, caller_number,dest_name,dest_number FROM {voipcall}".tablesort_sql($headers);
  $limit = 50;
  $result = pager_query($sql, $limit);
  
  if($result){
    //your basic while loop to get the data
    while($tmp = db_fetch_array($result)) {
      $owner = user_load($tmp['uid']);
      $tmp['start_time'] = format_date($tmp['start_time'], 'small');
      $tmp['uid'] = l($owner->name,'user/'.$owner->name);
      $tmp['other'] = l('See more','voipcall/'.$tmp['cid']);
      $data[] = $tmp;
    }
  }
  $output .= theme('table', $headers, $data);
  $output .= theme('pager', NULL, $limit, 0);
  return $output;
}

function voipcall_call_page($cid) {
   $call_data = db_fetch_array(db_query("SELECT * FROM {voipcall} WHERE cid=%d", $cid));
   foreach($call_data as $label => $data){
     $output.="<div><b>".$label.":</b> ".$data."</div>";
   }
   $output.=l("Go back","admin/voip/call/log");
   return $output;
}

function voipcall_call_page_title($arg) {
  return "VoIP Call CID " . $arg;
}
